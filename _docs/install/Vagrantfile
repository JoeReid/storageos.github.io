# -*- mode: ruby -*-
# vi: set ft=ruby :
#

# Set to 1 for single, or 3 or 5 for HA
$channel = (ENV['STORAGEOS_CHANNEL'] || "beta")
$num_node = (ENV['STORAGEOS_NODES'] || 3).to_i
$num_client = (ENV['STORAGEOS_CLIENTS'] || 0).to_i
$num_disk = (ENV['STORAGEOS_DISKS'] || 1).to_i
$node_ip_base = (ENV['STORAGEOS_IP_BASE'] || "10.205.10") + "#{$num_node}" + "."
$client_ip_base = (ENV['STORAGEOS_CLIENT_IP_BASE'] || "10.205.20") + "#{$num_client}" + "."
$node_ips = $num_node.times.collect { |n| $node_ip_base + "#{n+2}" }
$client_ips = $num_client.times.collect { |n| $client_ip_base + "#{n+2}" }
$leader_ip = $node_ips[0]

# Defaults for VMware or Virtualbox
$vm_gui = (ENV['STORAGEOS_GUI'] || false)
$vm_memory = (ENV['STORAGEOS_MEMORY'] || 2048)
$vm_cpus = (ENV['STORAGEOS_CPU'] || 2)

# Download credentials - not super-secret, just not open
$dl_user = (ENV['STORAGEOS_DOWNLOAD_USER'] || 'download')
$dl_pass = (ENV['STORAGEOS_DOWNLOAD_PASS'] || 'roh6kei7Oig2')

$boxes = {
  :virtualbox => {
    :box_url => "https://#{$dl_user}:#{$dl_pass}@downloads.storageos.com/images/packer_storageos-ubuntu_virtualbox.box"
  },
  :vmware_desktop => {
    :box_url => "https://#{$dl_user}:#{$dl_pass}@downloads.storageos.com/images/packer_storageos-ubuntu_vmware.box"
  }
}

# Write cluster info to file for copying to nodes.
File.open("storageos.env", "w+") do |f|
  f.puts "CHANNEL=#{$channel}"
  f.puts "NUM_NODES=#{$num_node}"
  f.print "NODES=\""
  $node_ips.each { |n| f.print "#{n} " }
  f.puts "\""
  f.puts "CONSUL_VERSION=v0.6.4"
  f.puts "CONSUL_LEADER=#{$leader_ip}"
  f.puts "LEADER=#{$leader_ip}"
  f.puts "API_AUTH_ENABLED=true"
  f.puts "STORAGEOS_USER=storageos"
  f.puts "STORAGEOS_PASSWORD=storageos"
  f.puts "LOG_LEVEL=info"
end

Vagrant.configure(2) do |config|

  def setvmboxandurl(config, provider)
    config.vm.box = "storageos"
    if $boxes[provider][:box_url] then
      config.vm.box_url = $boxes[provider][:box_url]
    end
  end

  def customize_vm(config, hostname)
    # Provider-specific config - increase default CPU/RAM and console
    ["vmware_fusion", "vmware_workstation"].each do |vmware|
      config.vm.provider vmware do |v, override|
        setvmboxandurl(override, :vmware_desktop)
        v.gui = $vm_gui
        v.vmx['memsize'] = $vm_memory
        v.vmx['numvcpus'] = $vm_cpus
      end
    end
    config.vm.provider :virtualbox do |v, override|
      setvmboxandurl(override, :virtualbox)
      v.gui = $vm_gui
      v.memory = $vm_memory
      v.cpus = $vm_cpus

      # Use faster paravirtualized networking
      v.customize ["modifyvm", :id, "--nictype1", "virtio"]
      v.customize ["modifyvm", :id, "--nictype2", "virtio"]

      port = 0
      $num_disk.times do |n|
        disk = File.realpath( "." ).to_s + "/" + hostname + "-disk" + n.to_s + ".vdi"
        if ARGV[0] == "up" && ! File.exist?(disk)
          v.customize ["createhd", "--filename", disk, "--size", 10240]
        end
        v.customize ["storageattach", :id, "--storagectl", "SAS Controller", "--port", port, "--device", 0, "--type", "hdd", "--medium", disk]
        port = port + 1
      end
    end
  end

  $num_node.times do |n|
    node_vm_name = "storageos-#{n+1}"
    node_hostname = "#{node_vm_name}"
    node_ip = $node_ips[n]

    config.vm.define node_vm_name do |node|
      customize_vm(node, "#{node_vm_name}")

      node.vm.hostname = node_hostname
      node.vm.network "private_network", ip: "#{node_ip}"

      $script = <<-SCRIPT
      set -e
      # Stop the container startup ASAP.
      echo "Stopping running storageos processes"
      systemctl disable storageos-env storageos
      systemctl stop storageos-env storageos
      # Populate /etc/default/storageos.
      cp /vagrant/storageos.env /etc/default/storageos
      echo HOST_IP=#{node_ip} >> /etc/default/storageos
      echo CONSUL=#{node_ip}:8500 >> /etc/default/storageos
      echo DEPLOYMENT_TYPE=controller >> /etc/default/storageos
      chmod 644 /etc/default/storageos
      cd /vagrant
      if [ -f imagefile.txt -a -f imageuuid.txt ]; then
          imgname=quay.io/storageos/storageos
          echo "Removing any existing $imgname:#{$channel} container."
          docker rmi -f quay.io/storageos/storageos:#{$channel} || true
          # Load the desired container.
          echo "Loading storageos container from `cat imagefile.txt`"
          gzip -cd `cat imagefile.txt` | docker load
          echo "Tagging $imgname:uuid-`cat imageuuid.txt` as $imgname:#{$channel}"
          docker tag $imgname:uuid-`cat imageuuid.txt` $imgname:#{$channel}
          # docker-compose remembers the old image.
          echo "Resetting docker-compose"
          cd /etc/storageos
          docker-compose rm -f
          docker images
      fi
      # Restart. Note consul depends on /etc/default/storageos.
      echo "Restarting storageos processes and consul"
      systemctl enable storageos-env storageos
      systemctl restart storageos consul
      SCRIPT
      node.vm.provision "shell", inline: $script
      # Only want serverspec when we explicitly ask for it with --provision-with.
      # (thanks https://groups.google.com/forum/#!topic/vagrant-up/ogcSyB9VazM)
      if ARGV.include? '--provision-with'
          config.vm.provision :serverspec, run: "never" do |spec|
            spec.pattern = 'test/smoke/**/*_spec.rb'
          end
      end
    end

  end

  $num_client.times do |n|
    node_vm_name = "client-#{n+1}"
    node_hostname = "#{node_vm_name}"
    node_ip = $client_ips[n]

    config.vm.define node_vm_name do |node|
      customize_vm(node, "#{node_vm_name}")

      node.vm.hostname = node_hostname
      node.vm.network "private_network", ip: "#{node_ip}"

      $script = <<-SCRIPT
      cp /vagrant/storageos.env /etc/default/storageos
      echo HOST_IP=#{node_ip} >> /etc/default/storageos
      echo CONSUL=#{node_ip} >> /etc/default/storageos
      echo DEPLOYMENT_TYPE=client >> /etc/default/storageos
      chmod 644 /etc/default/storageos
      SCRIPT
      node.vm.provision "shell", inline: $script
    end

  end

end